"""Initiates a project that will be using nfcore pipelines."""

from pathlib import Path
from typing import Annotated

import typer

from nfch import utils
from nfch.proj import Project

app = typer.Typer()


@app.command()
def prerequisites() -> None:
    """Show prerequisites of a typical nfcore project."""
    one = """
    1- Run this tool from within the top level directory of your project.
    """
    utils.info(message=one)

    two = """
    2- It is advised that the aforementioned top level directory is under version control for reproducibility purposes.
    """
    utils.info(message=two)

    three = """
    3- Initiation of the project is accomplished via the command "nfch project init" and it expects an optional
    parameter "genomes.json", listing all available genomes in your system. If you do not supply this information while
    the pipeline of interest requires it, you will need to manually edit the "nf_params.json" and provide this
    information once it is generated by the respective sub command ("nfch rnaseq", "nfch diffabund", etc.). You can
    always use the command "nfch project --genomes-json ..." to provide a (new) genome file even after the project has
    been initiated, this is probably a better approach then manually editing the parameters file.
    """
    utils.info(message=three)

    extras = """
    Extra things to check:
    1- Teams channel
    2- git repo dedicated to the (bioinformatics) project
    3- secuing raw data after integrity with checksum, sum, etc.
    4- transferring meta data to the Teams channel
    """
    utils.info(message=extras)


@app.command()
def init(
    email: Annotated[
        str | None,
        typer.Option(
            help="E-mail address to receive information regarding Nextflow runs.",
        ),
    ] = None,
    genomes_json: Annotated[
        Path | None,
        typer.Option(help="Path to the json file containing genome information."),
    ] = None,
) -> None:
    """Initiate project, track user, available genomes, ..."""
    Project(email=email, genomes_json=genomes_json)


@app.command()
def show_settings() -> None:
    """Show project settings: user, available genomes, ..."""
